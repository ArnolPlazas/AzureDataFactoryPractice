{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfarnolproject"
		},
		"la_sql_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'la_sql'"
		},
		"ls_datalake_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_datalake'"
		},
		"ls_datalake2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_datalake2'"
		},
		"la_sql_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "server-db-adf.database.windows.net"
		},
		"la_sql_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "db-adf"
		},
		"la_sql_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "adminarnol"
		},
		"ls_datalake2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://asaarnoladf.dfs.core.windows.net/"
		},
		"ls_rick_and_morty_api_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rickandmortyapi.com/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/la_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('la_sql_properties_typeProperties_server')]",
					"database": "[parameters('la_sql_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('la_sql_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('la_sql_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_datalake_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalake2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_datalake2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_datalake2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_rick_and_morty_api')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_rick_and_morty_api_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/arnolSelfHosted')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_airport_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimAirport.json",
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "rickandmorty.json",
						"folderPath": "api",
						"container": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_api_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_rick_and_morty_api",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": "api/character"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_rick_and_morty_api')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "la_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactBookings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/la_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_file_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"container": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalake_silver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_file_name": {
						"type": "string"
					},
					"p_file_folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().p_file_name",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().p_file_folder",
							"type": "Expression"
						},
						"container": "silver"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_emptyjson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "empty.json",
						"folderPath": "monitor/emptyjson",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_fact_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sql",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_flight_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimFlight.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lastload.json",
						"folderPath": "monitor/lastload",
						"fileSystem": "bronze"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"lasload": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_passenger')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimPassenger.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_silver_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DimAirline.csv",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalake2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "sql",
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataServing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_datalake2",
								"type": "LinkedServiceReference"
							},
							"name": "FactBooking"
						},
						{
							"linkedService": {
								"referenceName": "ls_datalake2",
								"type": "LinkedServiceReference"
							},
							"name": "DimAirline"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_datalake2",
								"type": "LinkedServiceReference"
							},
							"name": "sinkGold"
						}
					],
					"transformations": [
						{
							"name": "AirlineJoin"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "aggregateAirline"
						},
						{
							"name": "ranking"
						},
						{
							"name": "filterTop5"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          booking_id as integer,",
						"          passenger_id as integer,",
						"          flight_id as integer,",
						"          airline_id as integer,",
						"          origin_airport_id as integer,",
						"          destination_airport_id as integer,",
						"          booking_date as date,",
						"          ticket_cost as integer,",
						"          flight_duration_mins as integer,",
						"          checkin_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'FactBooking') ~> FactBooking",
						"source(output(",
						"          airline_id as short,",
						"          airline_name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'silver',",
						"     folderPath: 'Airline') ~> DimAirline",
						"FactBooking, DimAirline join(FactBooking@airline_id == DimAirline@airline_id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AirlineJoin",
						"AirlineJoin select(mapColumn(",
						"          booking_id,",
						"          passenger_id,",
						"          flight_id,",
						"          airline_id = FactBooking@airline_id,",
						"          origin_airport_id,",
						"          destination_airport_id,",
						"          booking_date,",
						"          ticket_cost,",
						"          flight_duration_mins,",
						"          checkin_status,",
						"          airline_name,",
						"          country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"selectCols aggregate(groupBy(airline_name),",
						"     total_sales = sum(ticket_cost)) ~> aggregateAirline",
						"aggregateAirline window(desc(total_sales, true),",
						"     Top = denseRank()) ~> ranking",
						"ranking filter(Top <= 5) ~> filterTop5",
						"filterTop5 alterRow(insertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'gold',",
						"     folderPath: 'bussinesView',",
						"     overwrite: true,",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     keys:['airline_name'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkGold"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalake2')]"
			]
		}
	]
}